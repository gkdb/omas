.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_omas_cocos.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_omas_cocos.py:


COCOS transformations
=====================
OMAS can seamlessly handle coordinates convention translations


.. code-block:: default


    from __future__ import print_function, division, unicode_literals

    import os

    os.environ['OMAS_DEBUG_TOPIC'] = 'cocos'

    from omas import *
    import numpy

    x = numpy.linspace(.1, 1, 10)

    # use different COCOS storage conventions

    ods = ODS(cocosio=11, cocos=11)
    ods['equilibrium.time_slice.0.profiles_1d.psi'] = x
    assert (numpy.allclose(ods['equilibrium.time_slice.0.profiles_1d.psi'], x))
    print(ods['equilibrium.time_slice.0.profiles_1d.psi'])

    ods = ODS(cocosio=11, cocos=2)
    ods['equilibrium.time_slice.0.profiles_1d.psi'] = x
    assert (numpy.allclose(ods['equilibrium.time_slice.0.profiles_1d.psi'], x))
    print(ods['equilibrium.time_slice.0.profiles_1d.psi'])

    ods = ODS(cocosio=2, cocos=11)
    ods['equilibrium.time_slice.0.profiles_1d.psi'] = x
    assert (numpy.allclose(ods['equilibrium.time_slice.0.profiles_1d.psi'], x))
    print(ods['equilibrium.time_slice.0.profiles_1d.psi'])

    ods = ODS(cocosio=2, cocos=2)
    ods['equilibrium.time_slice.0.profiles_1d.psi'] = x
    assert (numpy.allclose(ods['equilibrium.time_slice.0.profiles_1d.psi'], x))
    print(ods['equilibrium.time_slice.0.profiles_1d.psi'])

    # reassign the same value
    ods = ODS(cocosio=2)
    ods['equilibrium.time_slice.0.profiles_1d.psi'] = x
    ods['equilibrium.time_slice.0.profiles_1d.psi'] = ods['equilibrium.time_slice.0.profiles_1d.psi']
    assert (numpy.allclose(ods['equilibrium.time_slice.0.profiles_1d.psi'], x))
    print(ods['equilibrium.time_slice.0.profiles_1d.psi'])

    # use omas_environment
    ods = ODS(cocosio=2)
    ods['equilibrium.time_slice.0.profiles_1d.psi'] = x
    with omas_environment(ods, cocosio=11):
        assert (numpy.allclose(ods['equilibrium.time_slice.0.profiles_1d.psi'], -x * (2 * numpy.pi)))
        print(ods['equilibrium.time_slice.0.profiles_1d.psi'])

    ods['equilibrium.time_slice.0.profiles_1d.psi'] = x
    assert (numpy.allclose(ods['equilibrium.time_slice.0.profiles_1d.psi'], x))
    print(ods['equilibrium.time_slice.0.profiles_1d.psi'])


.. _sphx_glr_download_auto_examples_omas_cocos.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: omas_cocos.py <omas_cocos.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: omas_cocos.ipynb <omas_cocos.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
