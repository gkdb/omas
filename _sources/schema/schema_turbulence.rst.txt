
turbulence
^^^^^^^^^^

.. raw:: html

   <table border=1, width='100%'>
   <tr><th style="width:25%">Path</th><th style="width:25%">Dimensions</th><th>Type</th><th>Units</th><th>Description</th></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p></p></td><td><p></p></td><td><p>Description of plasma turbulence</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.code</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Generic decription of the code-specific parameters for the code that has produced this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.code.commit</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique commit reference of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.code.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of software generating IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.code.output_flag</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[turbulence.time]</p></td><td><p>INT_1D</p></td><td><p></p></td><td><p>Output flag : 0 means the run is successful, other values mean some difficulty has been encountered, the exact meaning is then code specific. Negative values mean the result shall not be used.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.code.parameters</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>List of the code specific parameters in XML format</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.code.repository</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>URL of software repository</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.code.version</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique version (tag) of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.grid_2d</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[turbulence.grid_2d[:].time]</p></td><td><p>struct_array</p></td><td><p></p></td><td><p>Values for the 2D grid, for various time slices. The timebase of this array of structure must be a subset of the profiles_2d timebase</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>turbulence.grid_2d[:].dim1</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>First dimension values</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>turbulence.grid_2d[:].dim2</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Second dimension values</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>turbulence.grid_2d[:].time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>flt_type</p></td><td><p>s</p></td><td><p>Time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.grid_2d_type</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Selection of one of a set of grid types for grid_2d<br>1) rectangular : Cylindrical R,Z ala eqdsk. In this case the position arrays should not be filled since they are redundant with grid/dim1 and dim2.<br>2) inverse : Rhopolar_polar 2D polar coordinates (rho, theta) with magnetic axis as center of grid; theta and values following the COCOS convention; the polar angle is theta=atan2(z-zaxis,r-raxis)<br>11) inverse_psi_straight_field_line : Flux surface type with psi as radial label and the straight-field line poloidal angle (mod(index,10)=1); could be non-equidistant; magnetic axis as center of grid; following the COCOS convention<br>12) inverse_psi_equal_arc : Flux surface type with psi as radial label and the equal arc poloidal angle (mod(index,10)=2)<br>13) inverse_psi_polar : Flux surface type with psi as radial label and the polar poloidal angle (mod(index,10)=3); could be non-equidistant<br>14) inverse_psi_straight_field_line_fourier : Flux surface type with psi as radial label and Fourier modes in the straight-field line poloidal angle (mod(index,10)=4), could be non-equidistant; magnetic axis as center of grid; following the COCOS convention<br>15) inverse_psi_equal_arc_fourier : Flux surface type with psi as radial label and Fourier modes in the equal arc poloidal angle (mod(index,10)=5)<br>16) inverse_psi_polar_fourier : Flux surface type with psi as radial label and Fourier modes in the polar poloidal angle (mod(index,10)=6); could be non-equidistant<br>21) inverse_rhopolnorm_straight_field_line : Flux surface type with radial label sqrt[(psi-psi_axis)/(psi_edge-psi_axis)] and the straight-field line poloidal angle<br>22) inverse_rhopolnorm_equal_arc : Flux surface type with radial label sqrt[(psi-psi_axis)/(psi_edge-psi_axis)] and the equal arc poloidal angle<br>23) inverse_rhopolnorm_polar : Flux surface type with radial label sqrt[(psi-psi_axis)/(psi_edge-psi_axis)] and the polar poloidal angle<br>24) inverse_rhopolnorm_straight_field_line_fourier : Flux surface type with radial label sqrt[(psi-psi_axis)/(psi_edge-psi_axis)] and Fourier modes in the straight-field line poloidal angle<br>25) inverse_rhopolnorm_equal_arc_fourier : Flux surface type with radial label sqrt[(psi-psi_axis)/(psi_edge-psi_axis)] and Fourier modes in the equal arc poloidal angle<br>26) inverse_rhopolnorm_polar_fourier : Flux surface type with radial label sqrt[(psi-psi_axis)/(psi_edge-psi_axis)] and Fourier modes in the polar poloidal angle<br>31) inverse_rhotornorm_straight_field_line : Flux surface type with radial label sqrt[Phi/Phi_edge] and the straight-field line poloidal angle<br>32) inverse_rhotornorm_equal_arc : Flux surface type with radial label sqrt[Phi/Phi_edge] and the equal arc poloidal angle<br>33) inverse_rhotornorm_polar : Flux surface type with radial label sqrt[Phi/Phi_edge] and the polar poloidal angle<br>34) inverse_rhotornorm_straight_field_line_fourier : Flux surface type with radial label sqrt[Phi/Phi_edge] and Fourier modes in the straight-field line poloidal angle<br>35) inverse_rhotornorm_equal_arc_fourier : Flux surface type with radial label sqrt[Phi/Phi_edge] and Fourier modes in the equal arc poloidal angle<br>36) inverse_rhotornorm_polar_fourier : Flux surface type with radial label sqrt[Phi/Phi_edge] and Fourier modes in the polar poloidal angle<br>41) inverse_rhopol_straight_field_line : Flux surface type with radial label sqrt[psi-psi_axis] and the straight-field line poloidal angle<br>42) inverse_rhopol_equal_arc : Flux surface type with radial label sqrt[psi-psi_axis] and the equal arc poloidal angle<br>43) inverse_rhopol_polar : Flux surface type with radial label sqrt[psi-psi_axis] and the polar poloidal angle<br>44) inverse_rhopol_straight_field_line_fourier : Flux surface type with radial label sqrt[psi-psi_axis] and Fourier modes in the straight-field line poloidal angle<br>45) inverse_rhopol_equal_arc_fourier : Flux surface type with radial label sqrt[psi-psi_axis] and Fourier modes in the equal arc poloidal angle<br>46) inverse_rhopol_polar_fourier : Flux surface type with radial label sqrt[psi-psi_axis] and Fourier modes in the polar poloidal angle<br>51) inverse_rhotor_straight_field_line : Flux surface type with radial label sqrt[Phi/pi/B0], Phi being toroidal flux, and the straight-field line poloidal angle<br>52) inverse_rhotor_equal_arc : Flux surface type with radial label sqrt[Phi/pi/B0], Phi being toroidal flux, and the equal arc poloidal angle<br>53) inverse_rhotor_polar : Flux surface type with radial label sqrt[Phi/pi/B0], Phi being toroidal flux, and the polar poloidal angle<br>54) inverse_rhotor_straight_field_line_fourier : Flux surface type with radial label sqrt[Phi/pi/B0], Phi being toroidal flux, and Fourier modes in the straight-field line poloidal angle<br>55) inverse_rhotor_equal_arc_fourier : Flux surface type with radial label sqrt[Phi/pi/B0], Phi being toroidal flux, and Fourier modes in the equal arc poloidal angle<br>56) inverse_rhotor_polar_fourier : Flux surface type with radial label sqrt[Phi/pi/B0], Phi being toroidal flux, and Fourier modes in the polar poloidal angle<br>91) irregular_rz_na : Irregular grid, thus give list of vertices in dim1(1:ndim1), dim2(1:ndim1) and then all fields are on values(1:ndim1,1)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.grid_2d_type.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.grid_2d_type.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.grid_2d_type.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.ids_properties</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Interface Data Structure properties. This element identifies the node above as an IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.ids_properties.comment</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Any comment describing the content of this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.ids_properties.creation_date</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Date at which this data has been produced</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.ids_properties.homogeneous_time</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>This node must be filled (with 0, 1, or 2) for the IDS to be valid. If 1, the time of this IDS is homogeneous, i.e. the time values for this IDS are stored in the time node just below the root of this IDS. If 0, the time values are stored in the various time fields at lower levels in the tree. In the case only constant or static nodes are filled within the IDS, homogeneous_time must be set to 2</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.ids_properties.provider</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of the person in charge of producing this data</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.ids_properties.source</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Source of the data (any comment describing the origin of the data : code, path to diagnostic signals, processing method, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.ids_properties.version_put</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Version of the access layer package used to PUT this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.ids_properties.version_put.access_layer</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Version of Access Layer used to PUT this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.ids_properties.version_put.access_layer_language</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Programming language of the Access Layer high level API used to PUT this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.ids_properties.version_put.data_dictionary</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Version of Data Dictionary used to PUT this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[turbulence.profiles_2d[:].time]</p></td><td><p>struct_array</p></td><td><p></p></td><td><p>Fluctuating physical quantities for various time slices</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].electrons</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Quantities related to electrons</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].electrons.density</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[turbulence.grid_2d[:].dim1,<br> turbulence.grid_2d[:].dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density (thermal+non-thermal)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].electrons.density_thermal</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[turbulence.grid_2d[:].dim1,<br> turbulence.grid_2d[:].dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density of thermal particles</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].electrons.temperature</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[turbulence.grid_2d[:].dim1,<br> turbulence.grid_2d[:].dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>eV</p></td><td><p>Temperature</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].ion</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>struct_array</p></td><td><p></p></td><td><p>Quantities related to the various ion species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].ion[:].density</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[turbulence.grid_2d[:].dim1,<br> turbulence.grid_2d[:].dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density (thermal+non-thermal) (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].ion[:].density_thermal</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[turbulence.grid_2d[:].dim1,<br> turbulence.grid_2d[:].dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density (thermal) (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].ion[:].element</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>struct_array</p></td><td><p></p></td><td><p>List of elements forming the atom or molecule</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].ion[:].element[:].a</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Atomic Mass Unit</p></td><td><p>Mass of atom</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].ion[:].element[:].atoms_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Number of atoms of this element in the molecule</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].ion[:].element[:].multiplicity</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Multiplicity of the atom</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].ion[:].element[:].z_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Nuclear charge</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].ion[:].label</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>String identifying ion (e.g. H+, D+, T+, He+2, C+, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].ion[:].neutral_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the corresponding neutral species in the ../../neutral array</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].ion[:].temperature</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[turbulence.grid_2d[:].dim1,<br> turbulence.grid_2d[:].dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>eV</p></td><td><p>Temperature (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].ion[:].z_ion</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Ion charge (of the dominant ionisation state; lumped ions are allowed), volume averaged over plasma radius</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].neutral</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>struct_array</p></td><td><p></p></td><td><p>Quantities related to the various neutral species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].neutral[:].density</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[turbulence.grid_2d[:].dim1,<br> turbulence.grid_2d[:].dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density (thermal+non-thermal) (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].neutral[:].density_thermal</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[turbulence.grid_2d[:].dim1,<br> turbulence.grid_2d[:].dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>m^-3</p></td><td><p>Density (thermal) (sum over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].neutral[:].element</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>struct_array</p></td><td><p></p></td><td><p>List of elements forming the atom or molecule</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].neutral[:].element[:].a</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Atomic Mass Unit</p></td><td><p>Mass of atom</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].neutral[:].element[:].atoms_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Number of atoms of this element in the molecule</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].neutral[:].element[:].multiplicity</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Multiplicity of the atom</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].neutral[:].element[:].z_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Nuclear charge</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].neutral[:].ion_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the corresponding ion species in the ../../ion array</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].neutral[:].label</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>String identifying ion (e.g. H+, D+, T+, He+2, C+, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>turbulence.profiles_2d[:].neutral[:].temperature</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[turbulence.grid_2d[:].dim1,<br> turbulence.grid_2d[:].dim2]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>eV</p></td><td><p>Temperature (average over charge states when multiple charge states are considered)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>turbulence.profiles_2d[:].time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>flt_type</p></td><td><p>s</p></td><td><p>Time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>turbulence.time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>flt_1d_type</p></td><td><p>s</p></td><td><p>Generic time</p></td></tr>
   </table>
   </table><p></p>
