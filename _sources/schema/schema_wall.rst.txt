
wall
^^^^

.. raw:: html

   <table border=1, width='100%'>
   <tr><th style="width:25%">Path</th><th style="width:25%">Dimensions</th><th>Type</th><th>Units</th><th>Description</th></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p></p></td><td><p></p></td><td><p>Description of the torus wall and its interaction with the plasma</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.code</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Generic decription of the code-specific parameters for the code that has produced this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.code.commit</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique commit reference of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.code.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of software generating IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.code.output_flag</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.time]</p></td><td><p>INT_1D</p></td><td><p></p></td><td><p>Output flag : 0 means the run is successful, other values mean some difficulty has been encountered, the exact meaning is then code specific. Negative values mean the result shall not be used.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.code.parameters</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>List of the code specific parameters in XML format</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.code.repository</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>URL of software repository</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.code.version</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Unique version (tag) of software</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>struct_array</p></td><td><p></p></td><td><p>Set of 2D wall descriptions, for each type of possible physics or engineering configurations necessary (gas tight vs wall with ports and holes, coarse vs fine representation, single contour limiter, disjoint gapped plasma facing components, ...). A simplified description of the toroidal extension of the 2D contours is also provided by using the phi_extensions nodes.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].limiter</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Description of the immobile limiting surface(s) or plasma facing components for defining the Last Closed Flux Surface.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].limiter.type</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Type of the limiter description. index = 0 for the official single contour limiter and 1 for the official disjoint PFC structure like first wall. Additional representations needed on a code-by-code basis follow same incremental pair tagging starting on index =2</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].limiter.type.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].limiter.type.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].limiter.type.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].limiter.unit</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>struct_array</p></td><td><p></p></td><td><p>Set of limiter units</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].limiter.unit[:].closed</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Flag identifying whether the contour is closed (1) or open (0)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].limiter.unit[:].name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of the limiter unit</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].limiter.unit[:].outline</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Irregular outline of the limiting surface. Do NOT repeat the first point for closed contours</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>wall.description_2d[:].limiter.unit[:].outline.r</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m</p></td><td><p>Major radius</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].limiter.unit[:].outline.z</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.description_2d[:].limiter.unit[:].outline.r]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m</p></td><td><p>Height</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].limiter.unit[:].phi_extensions</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...2,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>rad</p></td><td><p>Simplified description of toroidal angle extensions of the unit, by a list of zones defined by their center and full width (in toroidal angle).  In each of these zones, the unit outline remains the same. Leave this node empty for an axisymmetric unit. The first dimension gives the center and full width toroidal angle values for the unit. The second dimension represents the toroidal occurrences of the unit countour (i.e. the number of toroidal zones).</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].limiter.unit[:].resistivity</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>ohm.m</p></td><td><p>Resistivity of the limiter unit</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].mobile</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>In case of mobile plasma facing components, use the time-dependent description below this node to provide the full outline of the closest PFC surfaces to the plasma. Even in such a case, the 'limiter' structure is still used to provide the outermost limiting surface (can be used e.g. to define the boundary of the mesh of equilibrium reconstruction codes)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].mobile.type</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Type of the description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].mobile.type.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].mobile.type.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].mobile.type.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].mobile.unit</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>struct_array</p></td><td><p></p></td><td><p>Set of mobile units</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].mobile.unit[:].closed</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Flag identifying whether the contour is closed (1) or open (0)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].mobile.unit[:].name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of the mobile unit</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].mobile.unit[:].outline</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.description_2d[:].mobile.unit[:].outline[:].time]</p></td><td><p>struct_array</p></td><td><p></p></td><td><p>Irregular outline of the mobile unit, for a set of time slices. Do NOT repeat the first point for closed contours</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>wall.description_2d[:].mobile.unit[:].outline[:].r</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m</p></td><td><p>Major radius</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>wall.description_2d[:].mobile.unit[:].outline[:].time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>flt_type</p></td><td><p>s</p></td><td><p>Time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].mobile.unit[:].outline[:].z</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.description_2d[:].mobile.unit[:].outline[:].r]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m</p></td><td><p>Height</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].mobile.unit[:].phi_extensions</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...2,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>rad</p></td><td><p>Simplified description of toroidal angle extensions of the unit, by a list of zones defined by their center and full width (in toroidal angle).  In each of these zones, the unit outline remains the same. Leave this node empty for an axisymmetric unit. The first dimension gives the center and full width toroidal angle values for the unit. The second dimension represents the toroidal occurrences of the unit countour (i.e. the number of toroidal zones).</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].mobile.unit[:].resistivity</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>ohm.m</p></td><td><p>Resistivity of the mobile unit</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].type</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Type of the description. index = 0 for equilibrium codes (single closed limiter and vessel); 1 for gas-tight walls (disjoint PFCs with inner vessel as last limiter_unit; no vessel structure); 2 for free boundary codes (disjoint PFCs and vessel) </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].type.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].type.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].type.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].vessel</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Mechanical structure of the vacuum vessel. The vessel is described as a set of nested layers with given physics properties; Two representations are admitted for each vessel unit : annular (two contours) or block elements.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].vessel.type</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Type of the vessel description. index = 0 for the official single/multiple annular vessel and 1 for the official block element representation for each vessel unit. Additional representations needed on a code-by-code basis follow same incremental pair tagging starting on index=2</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].vessel.type.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].vessel.type.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].vessel.type.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].vessel.unit</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>struct_array</p></td><td><p></p></td><td><p>Set of vessel units</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].vessel.unit[:].annular</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Annular representation of a vessel layer by two contours, inner and outer</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].vessel.unit[:].annular.outline_inner</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Inner vessel outline. Do NOT repeat the first point for closed contours</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>wall.description_2d[:].vessel.unit[:].annular.outline_inner.r</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m</p></td><td><p>Major radius</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].vessel.unit[:].annular.outline_inner.z</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.description_2d[:].vessel.unit[:].annular.outline_inner.r]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m</p></td><td><p>Height</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].vessel.unit[:].annular.outline_outer</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Outer vessel outline. Do NOT repeat the first point for closed contours</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>wall.description_2d[:].vessel.unit[:].annular.outline_outer.r</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m</p></td><td><p>Major radius</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].vessel.unit[:].annular.outline_outer.z</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.description_2d[:].vessel.unit[:].annular.outline_outer.r]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m</p></td><td><p>Height</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].vessel.unit[:].annular.resistivity</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>ohm.m</p></td><td><p>Resistivity of the vessel unit</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].vessel.unit[:].element</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>struct_array</p></td><td><p></p></td><td><p>Set of block elements</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].vessel.unit[:].element[:].j_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p>A</p></td><td><p>Toroidal current induced in this block element</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].vessel.unit[:].element[:].j_tor.data</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.description_2d[:].vessel.unit[:].element[:].j_tor.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>A</p></td><td><p>Data</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>wall.description_2d[:].vessel.unit[:].element[:].j_tor.time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>flt_1d_type</p></td><td><p>s</p></td><td><p>Time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].vessel.unit[:].element[:].name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of the block element</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].vessel.unit[:].element[:].outline</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Outline of the block element. Do NOT repeat the first point for closed contours</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>wall.description_2d[:].vessel.unit[:].element[:].outline.r</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m</p></td><td><p>Major radius</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].vessel.unit[:].element[:].outline.z</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.description_2d[:].vessel.unit[:].element[:].outline.r]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>m</p></td><td><p>Height</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].vessel.unit[:].element[:].resistance</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Ohm</p></td><td><p>Resistance of the block element</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].vessel.unit[:].element[:].resistivity</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>ohm.m</p></td><td><p>Resistivity of the block element</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_2d[:].vessel.unit[:].name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of the vessel unit</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>struct_array</p></td><td><p></p></td><td><p>Set of 3D wall descriptions, described using the GGD, for each type of possible physics or engineering configurations necessary (gas tight vs wall with ports and holes, coarse vs fine representation, ...). </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].ggd</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.description_ggd[:].ggd[:].time]</p></td><td><p>struct_array</p></td><td><p></p></td><td><p>Wall physics quantities represented using the general grid description, for various time slices.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].ggd[:].power_density</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>struct_array</p></td><td><p>W.m^-2</p></td><td><p>Power density arriving on the wall surface, for various wall components (grid subsets)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].ggd[:].power_density[:].coefficients</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.description_ggd[:].ggd[:].power_density[:].values,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>W.m^-2</p></td><td><p>Interpolation coefficients, to be used for a high precision evaluation of the physical quantity with finite elements, provided per element in the grid subset (first dimension).</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].ggd[:].power_density[:].grid_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid used to represent this quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].ggd[:].power_density[:].grid_subset_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid subset the data is provided on</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>wall.description_ggd[:].ggd[:].power_density[:].values</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W.m^-2</p></td><td><p>One scalar value is provided per element in the grid subset.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].ggd[:].temperature</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>struct_array</p></td><td><p>K</p></td><td><p>Temperature of the wall, for various wall components (grid subsets)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].ggd[:].temperature[:].coefficients</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.description_ggd[:].ggd[:].temperature[:].values,<br> 1...N]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>K</p></td><td><p>Interpolation coefficients, to be used for a high precision evaluation of the physical quantity with finite elements, provided per element in the grid subset (first dimension).</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].ggd[:].temperature[:].grid_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid used to represent this quantity</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].ggd[:].temperature[:].grid_subset_index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the grid subset the data is provided on</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>wall.description_ggd[:].ggd[:].temperature[:].values</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>K</p></td><td><p>One scalar value is provided per element in the grid subset.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>wall.description_ggd[:].ggd[:].time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>flt_type</p></td><td><p>s</p></td><td><p>Time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.description_ggd[:].grid_ggd[:].time]</p></td><td><p>struct_array</p></td><td><p></p></td><td><p>Wall geometry described using the Generic Grid Description, for various time slices (in case of mobile wall elements). The timebase of this array of structure must be a subset of the timebase on which physical quantities are described (../ggd structure). Grid_subsets are used to describe various  wall components in a modular way.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].grid_subset</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>struct_array</p></td><td><p></p></td><td><p>Grid subsets</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].grid_subset[:].base</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>struct_array</p></td><td><p></p></td><td><p>Set of bases for the grid subset. For each base, the structure describes the projection of the base vectors on the canonical frame of the grid.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].grid_subset[:].base[:].jacobian</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.description_ggd[:].grid_ggd[:].grid_subset[:].element]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Metric Jacobian</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].grid_subset[:].base[:].tensor_contravariant</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.description_ggd[:].grid_ggd[:].grid_subset[:].element,<br> 1...N,<br> 1...N]</p></td><td><p>FLT_3D (uncertain)</p></td><td><p>mixed</p></td><td><p>Contravariant metric tensor, given on each element of the subgrid (first dimension)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].grid_subset[:].base[:].tensor_covariant</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.description_ggd[:].grid_ggd[:].grid_subset[:].element,<br> 1...N,<br> 1...N]</p></td><td><p>FLT_3D (uncertain)</p></td><td><p>mixed</p></td><td><p>Covariant metric tensor, given on each element of the subgrid (first dimension)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].grid_subset[:].dimension</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Space dimension of the grid subset elements. This must be equal to the sum of the dimensions of the individual objects forming the element.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>wall.description_ggd[:].grid_ggd[:].grid_subset[:].element</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>struct_array</p></td><td><p></p></td><td><p>Set of elements defining the grid subset. An element is defined by a combination of objects from potentially all spaces</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].grid_subset[:].element[:].object</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>struct_array</p></td><td><p></p></td><td><p>Set of objects defining the element</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].grid_subset[:].element[:].object[:].dimension</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Dimension of the object</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].grid_subset[:].element[:].object[:].index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Object index</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].grid_subset[:].element[:].object[:].space</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of the space from which that object is taken</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].grid_subset[:].identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Grid subset identifier<br>0) unspecified : unspecified<br>1) nodes : All nodes belonging to the associated spaces<br>2) faces : All faces belonging to the associated spaces<br>3) x_aligned_faces : All x-aligned (poloidally) aligned faces belonging to the associated spaces<br>4) y_aligned_faces : All y-aligned (radially) aligned faces belonging to the associated spaces<br>5) cells : All cells belonging to the associated spaces<br>6) x_points : Nodes defining x-points<br>7) core_cut : y-aligned faces inside the separatrix connecting to the active x-point<br>8) PFR_cut : y-aligned faces in the private flux region connecting to the active x-point<br>9) outer_throat : y-aligned faces in the outer SOL connecting to the active x-point<br>10) inner_throat : y-aligned faces in the inner SOL connecting to the active x-point<br>11) outer_midplane : y-aligned faces connecting to the node closest to outer midplane on the separatrix<br>12) inner_midplane : y-aligned faces connecting to the node closest to inner midplane on the separatrix<br>13) outer_target : y-aligned faces defining the outer target<br>14) inner_target : y-aligned faces defining the inner target<br>15) core_boundary : Innermost x-aligned faces<br>16) separatrix : x-aligned faces defining the active separatrix<br>17) main_chamber_wall : x-aligned faces defining main chamber wall outside of the divertor regions<br>18) outer_baffle : x-aligned faces defining the chamber wall of the outer active divertor region<br>19) inner_baffle : x-aligned faces defining the chamber wall of the inner active divertor region<br>20) outer_PFR_wall : x-aligned faces defining the private flux region wall of the outer active divertor region<br>21) inner_PFR_wall : x-aligned faces defining the private flux region wall of the inner active divertor region<br>22) core : Cells inside the active separatrix<br>23) sol : Cells defining the main SOL outside of the divertor regions<br>24) outer_divertor : Cells defining the outer divertor region<br>25) inner_divertor : Cells defining the inner divertor region<br>26) core_sol : x-aligned faces defining part of active separatrix separating core and sol<br>27) full_main_chamber_wall : main_chamber_wall + outer_baffle(s) + inner_baffle(s)<br>28) full_PFR_wall : outer_PFR__wall(s) + inner_PFR_wall(s)<br>29) core_cut_X2 : y-aligned faces inside the separatrix connecting to the non-active x-point<br>30) PFR_cut_X2 : y-aligned faces in the private flux region connecting to the non-active x-point<br>31) outer_throat_X2 : y-aligned faces in the outer SOL connecting to the non-active x-point<br>32) inner_throat_X2 : y-aligned faces in the inner SOL connecting to the non-active x-point<br>33) separatrix_2 : x-aligned faces defining the non-active separatrix<br>34) outer_baffle_2 : x-aligned faces defining the chamber wall of the outer non-active divertor region<br>35) inner_baffle_2 : x-aligned faces defining the chamber wall of the inner non-active divertor region<br>36) outer_PFR_wall_2 : x-aligned faces defining the private flux region wall of the outer non-active divertor region<br>37) inner_PFR_wall_2 : x-aligned faces defining the private flux region wall of the inner non-active divertor region<br>38) intra_sep : Cells between the two separatrices<br>39) outer_divertor_2 : Cells defining the outer inactive divertor region<br>40) inner_divertor_2 : Cells defining the inner inactive divertor region<br>41) outer_target_2 : y-aligned faces defining the outer inactive target<br>42) inner_target_2 : y-aligned faces defining the inner inactive target<br>101) outer_mid_plane_separatrix : Point on active separatrix at outer mid-plane<br>102) inner_mid_plane_separatrix : Point on active separatrix at inner mid-plane<br>103) outer_target_separatrix : Point on active separatrix at outer active target<br>104) inner_target_separatrix : Point on active separatrix at inner active target<br>105) outer_target_separatrix_2 : Point on non-active separatrix at outer non-active target<br>106) inner_target_separatrix_2 : Point on non-active separatrix at inner non-active target</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].grid_subset[:].identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].grid_subset[:].identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].grid_subset[:].identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].grid_subset[:].metric</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Metric of the canonical frame onto Cartesian coordinates</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].grid_subset[:].metric.jacobian</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.description_ggd[:].grid_ggd[:].grid_subset[:].element]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Metric Jacobian</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].grid_subset[:].metric.tensor_contravariant</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.description_ggd[:].grid_ggd[:].grid_subset[:].element,<br> 1...N,<br> 1...N]</p></td><td><p>FLT_3D (uncertain)</p></td><td><p>mixed</p></td><td><p>Contravariant metric tensor, given on each element of the subgrid (first dimension)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].grid_subset[:].metric.tensor_covariant</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.description_ggd[:].grid_ggd[:].grid_subset[:].element,<br> 1...N,<br> 1...N]</p></td><td><p>FLT_3D (uncertain)</p></td><td><p>mixed</p></td><td><p>Covariant metric tensor, given on each element of the subgrid (first dimension)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Grid identifier<br>0) unspecified : unspecified<br>1) linear : Linear<br>2) cylinder : Cylindrical geometry (straight in axial direction)<br>3) limiter : Limiter<br>4) SN : Single null<br>5) CDN : Connected double null<br>6) DDN_bottom : Disconnected double null with inner X-point below the midplane<br>7) DDN_top : Disconnected double null with inner X-point above the midplane<br>8) annulus : Annular geometry (not necessarily with straight axis)<br>9) stellerator_island : Stellarator island geometry</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].space</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>struct_array</p></td><td><p></p></td><td><p>Set of grid spaces</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].space[:].coordinates_type</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>INT_1D</p></td><td><p></p></td><td><p>Type of coordinates describing the physical space, for every coordinate of the space. The size of this node therfore defines the dimension of the space. The meaning of these predefined integer constants can be found in the documentation of the grid service library</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].space[:].geometry_type</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Type of space geometry (0: standard, 1:Fourier)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].space[:].geometry_type.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].space[:].geometry_type.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].space[:].geometry_type.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].space[:].identifier</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Space identifier<br>0) unspecified : unspecified<br>1) primary_standard : Primary space defining the standard grid<br>2) primary_staggered : Primary space defining a grid staggered with respect to the primary standard space</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].space[:].identifier.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].space[:].identifier.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].space[:].identifier.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].space[:].objects_per_dimension</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>struct_array</p></td><td><p></p></td><td><p>Definition of the space objects for every dimension (from one to the dimension of the highest-dimensional objects). The index correspond to 1=nodes, 2=edges, 3=faces, 4=cells/volumes, .... For every index, a collection of objects of that dimension is described.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].space[:].objects_per_dimension[:].object</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>struct_array</p></td><td><p></p></td><td><p>Set of objects for a given dimension</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].space[:].objects_per_dimension[:].object[:].boundary</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>struct_array</p></td><td><p></p></td><td><p>Set of  (n-1)-dimensional objects defining the boundary of this n-dimensional object</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].space[:].objects_per_dimension[:].object[:].boundary[:].index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Index of this (n-1)-dimensional boundary object</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].space[:].objects_per_dimension[:].object[:].boundary[:].neighbours</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>INT_1D</p></td><td><p></p></td><td><p>List of indices of the n-dimensional objects adjacent to the given n-dimensional object. An object can possibly have multiple neighbours on a boundary</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].space[:].objects_per_dimension[:].object[:].geometry</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>mixed</p></td><td><p>Geometry data associated with the object. Its dimension depends on the type of object, geometry and coordinate considered. </p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].space[:].objects_per_dimension[:].object[:].measure</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>m^dimension</p></td><td><p>Measure of the space object, i.e. physical size (length for 1d, area for 2d, volume for 3d objects,...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].grid_ggd[:].space[:].objects_per_dimension[:].object[:].nodes</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>INT_1D</p></td><td><p></p></td><td><p>List of nodes forming this object (indices to objects_per_dimension(1)%object(:) in Fortran notation)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>wall.description_ggd[:].grid_ggd[:].time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>flt_type</p></td><td><p>s</p></td><td><p>Time</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].type</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Type of wall: index = 0 for gas tight and 1 for a wall with holes/open ports</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].type.description</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Verbose description</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].type.index</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Integer identifier (enumeration index within a list). Private identifier values must be indicated by a negative index.</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.description_ggd[:].type.name</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Short string identifier</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Simple 0D description of plasma-wall interaction</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.current_tor</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>A</p></td><td><p>Toroidal current flowing in the vacuum vessel</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.electrons</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Quantities related to electrons</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.electrons.gas_puff</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>s^-1</p></td><td><p>Gas puff rate (in equivalent electrons)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.electrons.particle_flux_from_plasma</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>s^-1</p></td><td><p>Particle flux from the plasma (in equivalent electrons)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.electrons.particle_flux_from_wall</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...3,<br> wall.time]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>s^-1</p></td><td><p>Particle flux from the wall corresponding to the conversion into various neutral types (first dimension: 1: cold; 2: thermal; 3: fast), in equivalent electrons</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.electrons.power_inner_target</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W</p></td><td><p>Electron power on the inner target</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.electrons.power_outer_target</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W</p></td><td><p>Electron power on the inner target</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.electrons.pumping_speed</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>s^-1</p></td><td><p>Pumped particle flux (in equivalent electrons)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.neutral</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>struct_array</p></td><td><p></p></td><td><p>Quantities related to the various neutral species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.neutral[:].element</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>struct_array</p></td><td><p></p></td><td><p>List of elements forming the atom or molecule</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.neutral[:].element[:].a</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Atomic Mass Unit</p></td><td><p>Mass of atom</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.neutral[:].element[:].atoms_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>Number of atoms of this element in the molecule</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.neutral[:].element[:].multiplicity</p><p><font color="red">(obsolescent)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Multiplicity of the atom</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.neutral[:].element[:].z_n</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>FLT_0D (uncertain)</p></td><td><p>Elementary Charge Unit</p></td><td><p>Nuclear charge</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.neutral[:].gas_puff</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>s^-1</p></td><td><p>Gas puff rate for that species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.neutral[:].label</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>String identifying the species (e.g. H, D, CD4, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.neutral[:].particle_flux_from_plasma</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>s^-1</p></td><td><p>Particle flux from the plasma for that species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.neutral[:].particle_flux_from_wall</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...3,<br> wall.time]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>s^-1</p></td><td><p>Particle flux from the wall corresponding to the conversion into various neutral types (first dimension: 1: cold; 2: thermal; 3: fast)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.neutral[:].pumping_speed</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>s^-1</p></td><td><p>Pumped particle flux for that species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.neutral[:].recycling_energy_coefficient</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...3,<br> wall.time]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>-</p></td><td><p>Energy recycling coefficient corresponding to the conversion into various neutral types (first dimension: 1: cold; 2: thermal; 3: fast)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.neutral[:].recycling_particles_coefficient</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...3,<br> wall.time]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>-</p></td><td><p>Particle recycling coefficient corresponding to the conversion into various neutral types (first dimension: 1: cold; 2: thermal; 3: fast)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.neutral[:].sputtering_chemical_coefficient</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...3,<br> wall.time]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>-</p></td><td><p>Effective coefficient of chemical sputtering for various neutral types (first dimension: 1: cold; 2: thermal; 3: fast)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.neutral[:].sputtering_physical_coefficient</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...3,<br> wall.time]</p></td><td><p>FLT_2D (uncertain)</p></td><td><p>-</p></td><td><p>Effective coefficient of physical sputtering for various neutral types (first dimension: 1: cold; 2: thermal; 3: fast)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.neutral[:].wall_inventory</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>-</p></td><td><p>Wall inventory, i.e. cumulated exchange of neutral species between plasma and wall from t = 0, positive if a species has gone to the wall, for that species</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.power_density_inner_target_max</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W</p></td><td><p>Maximum power density on the inner target</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.power_density_outer_target_max</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W</p></td><td><p>Maximum power density on the outer target</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.power_from_plasma</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W</p></td><td><p>Power flowing from the plasma to the wall</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.power_inner_target_ion_total</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W</p></td><td><p>Total ion (summed over ion species) power on the inner target</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.power_to_cooling</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>W</p></td><td><p>Power to cooling systems</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.global_quantities.temperature</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[wall.time]</p></td><td><p>FLT_1D (uncertain)</p></td><td><p>K</p></td><td><p>Wall temperature</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.ids_properties</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Interface Data Structure properties. This element identifies the node above as an IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.ids_properties.comment</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Any comment describing the content of this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.ids_properties.creation_date</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Date at which this data has been produced</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.ids_properties.homogeneous_time</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>INT_0D</p></td><td><p></p></td><td><p>This node must be filled (with 0, 1, or 2) for the IDS to be valid. If 1, the time of this IDS is homogeneous, i.e. the time values for this IDS are stored in the time node just below the root of this IDS. If 0, the time values are stored in the various time fields at lower levels in the tree. In the case only constant or static nodes are filled within the IDS, homogeneous_time must be set to 2</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.ids_properties.provider</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Name of the person in charge of producing this data</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.ids_properties.source</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Source of the data (any comment describing the origin of the data : code, path to diagnostic signals, processing method, ...)</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.ids_properties.version_put</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>structure</p></td><td><p></p></td><td><p>Version of the access layer package used to PUT this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.ids_properties.version_put.access_layer</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Version of Access Layer used to PUT this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.ids_properties.version_put.access_layer_language</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Programming language of the Access Layer high level API used to PUT this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p>wall.ids_properties.version_put.data_dictionary</p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p></p></td><td><p>STR_0D</p></td><td><p></p></td><td><p>Version of Data Dictionary used to PUT this IDS</p></td></tr>
   <tr><td style="word-wrap:break-word;word-break:break-all"><p><strong>wall.time</strong></p><p><font color="blue">(alpha)</font></p></td><td style="word-wrap:break-word;word-break:break-all"><p>[1...N]</p></td><td><p>flt_1d_type</p></td><td><p>s</p></td><td><p>Generic time</p></td></tr>
   </table>
   </table><p></p>
